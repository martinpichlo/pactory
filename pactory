# Pacman History - Logfile Parser for pacman.log
# 01.01.2018, Martin Pichlo, First Version
# 16.02.2018, Martin Pichlo, Enhanced command line parameter interpretation
# 19.02.2018, Martin Pichlo, Bugfixing for reinstalled package, v.1.0.0
# 25.02.2018, Martin Pichlo, Change strings to arrays / use output string, v.1.1.0
# 26.02.2018, Martin Pichlo, Insert output string parameter

# ToDo
# - parameter for origin logfile lines
# - paramater for output string
# - man page
# - pacman split: only use parameters without leading minus (-)

#configuration
logfile="/var/log/pacman.log"
string_run="[PACMAN] Running"
string_sot="[ALPM] transaction started"
string_eot="[ALPM] transaction completed"
string_ins="[ALPM] installed"
string_upr="[ALPM] upgraded"
string_rem="[ALPM] removed"
string_rei="reinstalled"

#parameters for read command
IFS=" "					#splitt by space

#declarations
date=""					#Date
mode=""					#Mode (installed, removed, upgraded, reinstalled)
expl=()					#Explicit
deps=()					#Dependency
output=""               #Output String

# command line parameter interpretation
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -q|--quite)
    param_quite=true
    shift
    ;;
    -c|--color)
    param_color=true
    shift
    ;;
    -o|--output)
    param_output="$2"
    shift
    shift
    ;;
    -s|--short)
    param_short=true
    shift
    ;;
    -h|--help)
    param_usage=true
    shift
    ;;
    *)
    param_search=("$1")
    shift
    ;;
esac
done

usage() {

    echo "Usage: paclog [search] [options] or paclog [options] [search]"
    echo
    echo "Options:"
    echo "-q|--quite        quite output (for reusing in other commands like pacman)"
    echo "-c|--color        colored output"
    echo "-s|--short        short output (one line per transaction)"
    echo "-o|--output       output string format"

    #Usage
    #paclog.sh                      - Prints all commands
    #paclog.sh <regex>              - Regex search in: Date+Mode+Explicit+Packages
    #paclog.sh [regex] <options>    - Options

    #Mode values: {installed, removed, upgraded, reinstalled}

    #regex-Examples
    #paclog.sh "2018-01-01"			- Filter for commands of a date
    #paclog.sh "2018-01-01.*vim		- ... and a package (explicit or deps)
    #paclog.sh "2018-01-01.* inst.*vim 	- ... installed and package (Hint: Space in front of installed exclude reinstalled)

    #Example 1: Select packages and check, if they are installed
    #comm -12 <(pacman -Qq | sort) <(./paclog.sh "installed.*vim" -q | sort)

    #output string
    #%t - timestamp
    #%m - mode
    #%e - explicit
    #%d - dependencies

}

start() {

    # show usage message
	if [ "${param_usage}" ]; then
        usage
        exit
    fi

	# color settings
	if [ "${param_color}" ]; then
		green=$(tput setaf 2)
		reset=$(tput sgr0)
	fi

    # loop through all lines in logfiles
	sot=false
	while read line
	do

		# Running pacman...
		if [[ "$line" == *"$string_run"* ]]; then
			expl_line="$line"
			sot=false
            continue
		fi

		# transaction started
		if [ -n "$expl_line" ]; then
			if [[ "$line" == *"$string_sot"* ]]; then
				sot=true
				split_pacman "$expl_line"
				continue
			fi
		fi

		# packages installed, upgraded, removed or reinstalled
		if [ "$sot" ]; then

			if [[ "$line" == *"$string_ins"* ]] ||
			   [[ "$line" == *"$string_upr"* ]] ||
			   [[ "$line" == *"$string_rem"* ]] ||
		   	   [[ "$line" == *"$string_rei"* ]]; then
				    split_prog "$line"
		            continue
		        fi
		fi

		# transaction completed
		if [[ "$line" == *"$string_eot"* ]]; then

			if [ -z "${param_search}" ];then
				output
			else
				search="${date} ${mode} ${expl[@]} ${deps[@]}"
				if [[ ${search} =~ $param_search ]]; then
					output
				fi
			fi

            # clear vars for next transaction
            date=""
			mode=""
			unset expl
			unset deps
			search=""
        	sot=false
			expl_line=""
            output=""
			continue
		fi

	done < $logfile

}

split_pacman() {

	# delete charachters:: ' [ ]
	str=$1
	str=${str//\'/}
	str=${str//\[/}
	str=${str//\]/}

	# split string by space
    read -ra array <<< "$str"

    # set date an time
    date="${array[0]} ${array[1]}"

	# loop through array
	options=false
	for i in "${array[@]}"; do

        # check if options were allready read
        if [ "$options" == true ]; then

			# add expl to array
            expl+=("$i")

		fi

        # check for options
        if [[ "${i:0:1}" == "-" ]]; then
            options=true
        fi

	done

}

split_prog() {

	str=$1

    # split string by space
    read -ra array <<< "$str"
	prog="${array[4]}"
	mode="${array[3]}"

    #add prog to array
    deps+=("$prog")

}

output() {

    # set explicit for pacman -Syu
    if [ -z "$expl" ] && [[ "$mode" == "upgraded" ]]; then
        expl="<UPGRADE>"
    fi

    # quite output 
	if [ "${param_quite}" ]; then
		for i in "${deps[@]}"; do
			echo $i
		done
        return
	fi

    # set output string
    output="$param_output"
    if [ -z "$output"  ]; then

        # short output
        if [ "$param_short" ]; then
	        output="%t | %m | <%e> | %d"

        # long/default output
        else
            output="Date: %t\nMode: %m\nExplicit: <%e>\nPackages: %d\n"

        fi
    
    fi

    # replace placeholder
    output=${output//</${green}}      #< - green color
    output=${output//>/${reset}}      #> - color reset
    output=${output//%t/${date}}      #%t - timestamp
    output=${output//%m/${mode}}      #%m - mode
    output=${output//%e/${expl[@]}}   #%e - explicit
    output=${output//%d/${deps[@]}}   #%d - dependencies

    # echo output
    echo -e $output

}

start
